diff --git a/reduced_hash_v2.rs b/reduced_hash_v3.rs
index 170caaf..f726a79 100644
--- a/reduced_hash_v2.rs
+++ b/reduced_hash_v3.rs
@@ -4,10 +4,10 @@ use compact_str::CompactString;
 use rustc_hash::{FxBuildHasher, FxHashMap};
 use smallvec::SmallVec;
 
-// Requires: Hash Join, Explicit Buffer, Preallocation, Pattern Matching, no entry API, CompactString, BufWriter, SmallVec
-// New: read splits instead of lines
-// Faster because only split instead of lines => not going over string twice
-pub fn reduced_hash_v2(args: Vec<String>) {
+// Requires: Hash Join, Explicit Buffer, Preallocation, Pattern Matching, no entry API, CompactString, BufWriter, SmallVec, read splits
+// New: file order
+// Faster because f2 is smaller => smaller Hashmap
+pub fn reduced_hash_v3(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file(&args[1]), read_file(&args[2]), read_file(&args[3]), read_file_to_map(&args[4])
     );
@@ -15,7 +15,7 @@ pub fn reduced_hash_v2(args: Vec<String>) {
     join(f1, f2, f3, f4);
 }
 
-pub fn reduced_hash_v2_read(args: Vec<String>) {
+pub fn reduced_hash_v3_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file(&args[1]), read_file(&args[2]), read_file(&args[3]), read_file_to_map(&args[4])
     );
@@ -59,7 +59,7 @@ fn read_file_to_map(file: &String) -> FxHashMap<CompactString, SmallVec<[Compact
 
 pub fn join(f1: Vec<(CompactString, CompactString)>, f2: Vec<(CompactString, CompactString)>, f3: Vec<(CompactString, CompactString)>, f4: FxHashMap<CompactString, SmallVec<[CompactString; 1]>>) {
     let mut dict_a: FxHashMap<CompactString, (SmallVec<[CompactString; 1]>, SmallVec<[CompactString; 1]>, SmallVec<[CompactString; 1]>)> = FxHashMap::default();
-    for (key, value) in f1.iter() {
+    for (key, value) in f2.iter() {
         if let Some(entry) = dict_a.get_mut(key) {
             entry.0.push(value.clone());
         } else {
@@ -68,7 +68,7 @@ pub fn join(f1: Vec<(CompactString, CompactString)>, f2: Vec<(CompactString, Com
             dict_a.insert(key.clone(), (vec, SmallVec::new(), SmallVec::new()));
         }
     }
-    for data in f2.iter() {
+    for data in f1.iter() {
         if let Some(entry) = dict_a.get_mut(&data.0) {
             entry.1.push(data.1.clone());
         }
@@ -84,7 +84,7 @@ pub fn join(f1: Vec<(CompactString, CompactString)>, f2: Vec<(CompactString, Com
     let stdout = stdout();
     let lock = stdout.lock();
     let mut buffer = BufWriter::new(lock);
-    for (a_val, (f1_2, f2_2, f3_2)) in dict_a.iter() {
+    for (a_val, (f2_2, f1_2, f3_2)) in dict_a.iter() {
         for f3_2_val in f3_2.iter() {
             if let Some(f4_2_list) = f4.get(f3_2_val) {
                 for f4_2_val in f4_2_list.iter() {
