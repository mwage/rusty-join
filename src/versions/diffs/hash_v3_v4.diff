diff --git a/hash_v3.rs b/hash_v4.rs
index 7fc4ea7..cc491d9 100644
--- a/hash_v3.rs
+++ b/hash_v4.rs
@@ -1,11 +1,10 @@
+use rustc_hash::{FxHashMap, FxBuildHasher};
 use std::fs::read_to_string;
 
-use rustc_hash::FxHashMap;
-
-// Requires: Hash Join, Buffer
-// New: Explicit Buffer
+// Requires: Hash Join, Explicit Buffer
+// New: Preallocate Vector and Hashmap
 // Better because it removes format overhead
-pub fn hash_v3(args: Vec<String>) {
+pub fn hash_v4(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -13,7 +12,7 @@ pub fn hash_v3(args: Vec<String>) {
     join_first_three_and_output_with_forth(f1, f2, f3, f4);
 }
 
-pub fn hash_v3_read(args: Vec<String>) {
+pub fn hash_v4_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -21,11 +20,13 @@ pub fn hash_v3_read(args: Vec<String>) {
 }
 
 fn read_file_to_map(file: &String) -> FxHashMap<String, Vec<String>> {
-    let mut map: FxHashMap<String, Vec<String>> = FxHashMap::default();
+    let mut map: FxHashMap<String, Vec<String>> = FxHashMap::with_capacity_and_hasher(5000000, FxBuildHasher::default());
 
     for line in read_to_string(file).unwrap().lines() {
         let mut split = line.split(",").map(|x| x.to_string());
-        map.entry(split.next().unwrap()).or_default().push(split.next().unwrap());
+        map.entry(split.next().unwrap())
+            .or_insert_with(|| Vec::with_capacity(5))
+            .push(split.next().unwrap());
     }
 
     map
