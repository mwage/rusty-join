diff --git a/hash_v4.rs b/hash_v5.rs
index cc491d9..6caafb6 100644
--- a/hash_v4.rs
+++ b/hash_v5.rs
@@ -1,10 +1,10 @@
 use rustc_hash::{FxHashMap, FxBuildHasher};
 use std::fs::read_to_string;
 
-// Requires: Hash Join, Explicit Buffer
-// New: Preallocate Vector and Hashmap
-// Better because it removes format overhead
-pub fn hash_v4(args: Vec<String>) {
+// Requires: Hash Join, Explicit Buffer, Preallocation
+// New: Pattern Matching
+// Better because it reduces branch mispredictions?
+pub fn hash_v5(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -12,7 +12,7 @@ pub fn hash_v4(args: Vec<String>) {
     join_first_three_and_output_with_forth(f1, f2, f3, f4);
 }
 
-pub fn hash_v4_read(args: Vec<String>) {
+pub fn hash_v5_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -34,30 +34,25 @@ fn read_file_to_map(file: &String) -> FxHashMap<String, Vec<String>> {
 
 fn join_first_three_and_output_with_forth(f1: FxHashMap<String, Vec<String>>, f2: FxHashMap<String, Vec<String>>, f3: FxHashMap<String, Vec<String>>, f4: FxHashMap<String, Vec<String>>) {
     let mut buffer = String::new();
-    
-    for key in f1.keys() {
-        if !f2.contains_key(key) || !f3.contains_key(key) {
-            continue;   // Not in all 3
-        }
-
-        for x1 in f1.get(key).unwrap() {
-            for x2 in f2.get(key).unwrap() {
-                for x3 in f3.get(key).unwrap() {
-                    if !f4.contains_key(x3) {
-                        continue;
-                    }
-                    
-                    for x4 in f4.get(x3).unwrap() {
-                        buffer.push_str(x3);
-                        buffer.push(',');
-                        buffer.push_str(key);
-                        buffer.push(',');
-                        buffer.push_str(x1);
-                        buffer.push(',');
-                        buffer.push_str(x2);
-                        buffer.push(',');
-                        buffer.push_str(x4);
-                        buffer.push('\n');
+    for (key, vec1) in f1.iter() {
+        if let (Some(vec2), Some(vec3)) = (f2.get(key), f3.get(key)) {
+            for x1 in vec1 {
+                for x2 in vec2 {
+                    for x3 in vec3 {
+                        if let Some(vec4) = f4.get(x3) {
+                            for x4 in vec4 {
+                                buffer.push_str(x3);
+                                buffer.push(',');
+                                buffer.push_str(key);
+                                buffer.push(',');
+                                buffer.push_str(x1);
+                                buffer.push(',');
+                                buffer.push_str(x2);
+                                buffer.push(',');
+                                buffer.push_str(x4);
+                                buffer.push('\n');
+                            }
+                        }
                     }
                 }
             }
