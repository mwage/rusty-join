diff --git a/hash_v5.rs b/hash_v6.rs
index 6caafb6..cd6fae4 100644
--- a/hash_v5.rs
+++ b/hash_v6.rs
@@ -1,10 +1,10 @@
-use rustc_hash::{FxHashMap, FxBuildHasher};
-use std::fs::read_to_string;
+use rustc_hash::{FxBuildHasher, FxHashMap};
 
-// Requires: Hash Join, Explicit Buffer, Preallocation
-// New: Pattern Matching
-// Better because it reduces branch mispredictions?
-pub fn hash_v5(args: Vec<String>) {
+
+// Requires: Hash Join, Explicit Buffer, Preallocation, Pattern Matching
+// New: Avoiding Entry API, use split_once to get tuple // TODO: Maybe split into two?
+// Better because of API overheads?
+pub fn hash_v6(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -12,7 +12,7 @@ pub fn hash_v5(args: Vec<String>) {
     join_first_three_and_output_with_forth(f1, f2, f3, f4);
 }
 
-pub fn hash_v5_read(args: Vec<String>) {
+pub fn hash_v6_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -21,14 +21,19 @@ pub fn hash_v5_read(args: Vec<String>) {
 
 fn read_file_to_map(file: &String) -> FxHashMap<String, Vec<String>> {
     let mut map: FxHashMap<String, Vec<String>> = FxHashMap::with_capacity_and_hasher(5000000, FxBuildHasher::default());
+    let contents = std::fs::read_to_string(file).unwrap();
 
-    for line in read_to_string(file).unwrap().lines() {
-        let mut split = line.split(",").map(|x| x.to_string());
-        map.entry(split.next().unwrap())
-            .or_insert_with(|| Vec::with_capacity(5))
-            .push(split.next().unwrap());
+    for line in contents.lines() {
+        if let Some((key, value)) = line.split_once(',') {
+            if let Some(entry) = map.get_mut(key) {
+                entry.push(value.to_string());
+            } else {
+                let mut vec = Vec::with_capacity(5);
+                vec.push(value.to_string());
+                map.insert(key.to_string(), vec);
+            }
+        }
     }
-
     map
 }
 
