diff --git a/reduced_hash_v3.rs b/reduced_hash_v4.rs
index f726a79..ce1d08a 100644
--- a/reduced_hash_v3.rs
+++ b/reduced_hash_v4.rs
@@ -5,9 +5,9 @@ use rustc_hash::{FxBuildHasher, FxHashMap};
 use smallvec::SmallVec;
 
 // Requires: Hash Join, Explicit Buffer, Preallocation, Pattern Matching, no entry API, CompactString, BufWriter, SmallVec, read splits
-// New: file order
-// Faster because f2 is smaller => smaller Hashmap
-pub fn reduced_hash_v3(args: Vec<String>) {
+// New: vector capacity to max file length
+// Faster because no doubling of large vector necessary
+pub fn reduced_hash_v4(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file(&args[1]), read_file(&args[2]), read_file(&args[3]), read_file_to_map(&args[4])
     );
@@ -15,7 +15,7 @@ pub fn reduced_hash_v3(args: Vec<String>) {
     join(f1, f2, f3, f4);
 }
 
-pub fn reduced_hash_v3_read(args: Vec<String>) {
+pub fn reduced_hash_v4_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file(&args[1]), read_file(&args[2]), read_file(&args[3]), read_file_to_map(&args[4])
     );
@@ -23,7 +23,7 @@ pub fn reduced_hash_v3_read(args: Vec<String>) {
 
 pub fn read_file(file: &String) -> Vec<(CompactString, CompactString)> {
     let contents = std::fs::read_to_string(file).unwrap();
-    let mut vec = Vec::new();
+    let mut vec = Vec::with_capacity(12000000);
     let mut remainder = contents.as_str();
 
     while let Some((key, rem)) = remainder.split_once(',') {
