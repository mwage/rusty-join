diff --git a/reduced_hash_v1.rs b/reduced_hash_v2.rs
index 36ef288..170caaf 100644
--- a/reduced_hash_v1.rs
+++ b/reduced_hash_v2.rs
@@ -1,13 +1,13 @@
-use std::{fs::read_to_string, io::{stdout, BufWriter, Write}};
+use std::io::{stdout, BufWriter, Write};
 
 use compact_str::CompactString;
 use rustc_hash::{FxBuildHasher, FxHashMap};
 use smallvec::SmallVec;
 
 // Requires: Hash Join, Explicit Buffer, Preallocation, Pattern Matching, no entry API, CompactString, BufWriter, SmallVec
-// New: reduced number of Hashmaps
-// Faster (this version same?) because / less Hashmaps
-pub fn reduced_hash_v1(args: Vec<String>) {
+// New: read splits instead of lines
+// Faster because only split instead of lines => not going over string twice
+pub fn reduced_hash_v2(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file(&args[1]), read_file(&args[2]), read_file(&args[3]), read_file_to_map(&args[4])
     );
@@ -15,27 +15,34 @@ pub fn reduced_hash_v1(args: Vec<String>) {
     join(f1, f2, f3, f4);
 }
 
-pub fn reduced_hash_v1_read(args: Vec<String>) {
+pub fn reduced_hash_v2_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file(&args[1]), read_file(&args[2]), read_file(&args[3]), read_file_to_map(&args[4])
     );
 }
 
 pub fn read_file(file: &String) -> Vec<(CompactString, CompactString)> {
-    read_to_string(file).unwrap().lines().map(
-        |line| { 
-            let (key, val) = line.split_once(",").unwrap(); 
-            (CompactString::from(key), CompactString::from(val)) 
-        }
-    ).collect()
+    let contents = std::fs::read_to_string(file).unwrap();
+    let mut vec = Vec::new();
+    let mut remainder = contents.as_str();
+
+    while let Some((key, rem)) = remainder.split_once(',') {
+        let (value, rem) = rem.split_once('\n').unwrap();
+        remainder = rem;
+        vec.push((CompactString::from(key), CompactString::from(value)));
+    }
+
+    vec
 }
 
 fn read_file_to_map(file: &String) -> FxHashMap<CompactString, SmallVec<[CompactString; 1]>> {
     let mut map: FxHashMap<CompactString, SmallVec<[CompactString; 1]>> = FxHashMap::with_capacity_and_hasher(5000000, FxBuildHasher::default());
     let contents = std::fs::read_to_string(file).unwrap();
+    let mut remainder = contents.as_str();
+
+    while let Some((key, rem)) = remainder.split_once(',') {
+        let (value, rem) = rem.split_once('\n').unwrap();
 
-    for line in contents.lines() {
-        let (key, value) = line.split_once(',').unwrap();
         if let Some(entry) = map.get_mut(key) {
             entry.push(CompactString::from(value));
         } else {
@@ -43,7 +50,10 @@ fn read_file_to_map(file: &String) -> FxHashMap<CompactString, SmallVec<[Compact
             vec.push(CompactString::from(value));
             map.insert(CompactString::from(key), vec);
         }
+
+        remainder = rem;
     }
+    
     map
 }
 
