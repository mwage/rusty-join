diff --git a/hash_v2.rs b/hash_v3.rs
index 0352c90..7fc4ea7 100644
--- a/hash_v2.rs
+++ b/hash_v3.rs
@@ -2,10 +2,10 @@ use std::fs::read_to_string;
 
 use rustc_hash::FxHashMap;
 
-// Requires: Hash Join
-// New: Buffer
-// Better because it doesn't constantly call StdOut
-pub fn hash_v2(args: Vec<String>) {
+// Requires: Hash Join, Buffer
+// New: Explicit Buffer
+// Better because it removes format overhead
+pub fn hash_v3(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -13,7 +13,7 @@ pub fn hash_v2(args: Vec<String>) {
     join_first_three_and_output_with_forth(f1, f2, f3, f4);
 }
 
-pub fn hash_v2_read(args: Vec<String>) {
+pub fn hash_v3_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -47,7 +47,16 @@ fn join_first_three_and_output_with_forth(f1: FxHashMap<String, Vec<String>>, f2
                     }
                     
                     for x4 in f4.get(x3).unwrap() {
-                        buffer.push_str(&format!("{},{},{},{},{}\n", x3, key, x1, x2, x4));
+                        buffer.push_str(x3);
+                        buffer.push(',');
+                        buffer.push_str(key);
+                        buffer.push(',');
+                        buffer.push_str(x1);
+                        buffer.push(',');
+                        buffer.push_str(x2);
+                        buffer.push(',');
+                        buffer.push_str(x4);
+                        buffer.push('\n');
                     }
                 }
             }
