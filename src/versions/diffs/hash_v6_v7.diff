diff --git a/hash_v6.rs b/hash_v7.rs
index cd6fae4..0825b87 100644
--- a/hash_v6.rs
+++ b/hash_v7.rs
@@ -1,10 +1,10 @@
+use compact_str::CompactString;
 use rustc_hash::{FxBuildHasher, FxHashMap};
 
-
-// Requires: Hash Join, Explicit Buffer, Preallocation, Pattern Matching
-// New: Avoiding Entry API, use split_once to get tuple // TODO: Maybe split into two?
-// Better because of API overheads?
-pub fn hash_v6(args: Vec<String>) {
+// Requires: Hash Join, Explicit Buffer, Preallocation, Pattern Matching, no entry API
+// New: CompactString
+// Better because the small CompactStrings can be stored on the stack
+pub fn hash_v7(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
@@ -12,32 +12,32 @@ pub fn hash_v6(args: Vec<String>) {
     join_first_three_and_output_with_forth(f1, f2, f3, f4);
 }
 
-pub fn hash_v6_read(args: Vec<String>) {
+pub fn hash_v7_read(args: Vec<String>) {
     let (f1, f2, f3, f4) = (
         read_file_to_map(&args[1]), read_file_to_map(&args[2]),
         read_file_to_map(&args[3]), read_file_to_map(&args[4])
     );
 }
 
-fn read_file_to_map(file: &String) -> FxHashMap<String, Vec<String>> {
-    let mut map: FxHashMap<String, Vec<String>> = FxHashMap::with_capacity_and_hasher(5000000, FxBuildHasher::default());
+fn read_file_to_map(file: &String) -> FxHashMap<CompactString, Vec<CompactString>> {
+    let mut map: FxHashMap<CompactString, Vec<CompactString>> = FxHashMap::with_capacity_and_hasher(5000000, FxBuildHasher::default());
     let contents = std::fs::read_to_string(file).unwrap();
 
     for line in contents.lines() {
-        if let Some((key, value)) = line.split_once(',') {
-            if let Some(entry) = map.get_mut(key) {
-                entry.push(value.to_string());
-            } else {
-                let mut vec = Vec::with_capacity(5);
-                vec.push(value.to_string());
-                map.insert(key.to_string(), vec);
-            }
+        let (key, value) = line.split_once(',').unwrap();
+        if let Some(entry) = map.get_mut(key) {
+            entry.push(CompactString::from(value));
+        } else {
+            // ~2m better than without ::with_capacity(5)
+            let mut vec = Vec::with_capacity(5);
+            vec.push(CompactString::from(value));
+            map.insert(CompactString::from(key), vec);
         }
     }
     map
 }
 
-fn join_first_three_and_output_with_forth(f1: FxHashMap<String, Vec<String>>, f2: FxHashMap<String, Vec<String>>, f3: FxHashMap<String, Vec<String>>, f4: FxHashMap<String, Vec<String>>) {
+fn join_first_three_and_output_with_forth(f1: FxHashMap<CompactString, Vec<CompactString>>, f2: FxHashMap<CompactString, Vec<CompactString>>, f3: FxHashMap<CompactString, Vec<CompactString>>, f4: FxHashMap<CompactString, Vec<CompactString>>) {
     let mut buffer = String::new();
     for (key, vec1) in f1.iter() {
         if let (Some(vec2), Some(vec3)) = (f2.get(key), f3.get(key)) {
